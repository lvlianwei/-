
1 引用
typedef：定义新的数据类型。
	typedef int COUNT;
	COUNT num=1;
================================================================
	引用必须初始化
	变量引用
	
		基础类型的引用相当于取了别名，
	数组的引用
		typedef int ArrRef[10];//通过typedef定义一个int 的别名 ArrRef[10]
		int arr[10];
		ArrRef& aRef = arr;
		for (int i = 0; i < 10;i ++){
			aRef[i] = i+1;
		}
		for (int i = 0; i < 10;i++){
			cout << arr[i] << " ";       
		}

	函数引用
		引用当作参数时，在函数内对任何引用的修改，将对还函数外的参数产生改变
			1) 函数调用时传递的实参不必加“&”符 
			2) 在被调函数中不必在参数前加“*”符
			引用作为其它变量的别名而存在，因此在一些场合可以代替指针。
			C++主张用引用传递取代地址传递的方式，因为引用语法容易且不易出错。
			
		引用当作返回值时，从函数中返回一个引用，必须像从函数中返回一个指针一样对待，引用关联的内存一定要存在
			不可以返回局部变量的引用
			函数作为左值时，必须返回引用
	
	指针的引用
	
		Type* pointer = NULL;  Type*& = pointer;
		int  a=13;
		int *b=&a;
		int *&c=b;//*&c指针的引用
		
	常量的引用
		基本语法；
			const Type& ref = val;
		const修饰的引用，不能修改。
			int a=11;
			const int& refA=a;
			//refA=44;----不可修改。
			a=44;---可以修改
		字面量不能赋给引用，但是可以赋给const引用
			int & a=100；---字面量不可以赋给引用
			const int& aa=99;----可以赋值给const引用
		使用场景：
			参数形参（尤其是类的拷贝/复制构造函数）
			好处：
				不产生新的变量，减少实参与形参传递的开销
				引用可以引起实参随着形参的改变而改变，定义为常量可消除这种副作用。
				
2 内联函数
		inline int func(int a){return ++;}
		声明和函数的实现要放在一起，不然会当作普通函数对待。
		内联函数具有普通函数的属性，但是不同的是，内联函数会在适当的地方像预定义宏一样展开。
		节省函数调用时的开销。
		当编译器处理调用内联函数的语句时，不会将该语句编译成函数调用的指令，而是直接将整个函数体的代码插人调用语句处，就像整个函数体在调用处被重写了一遍一样。
		会增加代码的体积，以空间换时间。
		
		如果对内联函数做了修改，需要对所有的调用该函数的地方进行重新编译，否则仍然是使用旧的内联函数
		内联函数一般都是不超过10行的小函数。
		在内联函数内不允许使用循环语句和开关语句;
		内联函数的定义必须出现在内联函数第一次调用之前;
		
		
		对于类内部的内联函数
			类的内部的函数都是自动称为内联函数
			
		将函数声明为内联函数只是给编译器一个建议，编译器可采纳可不采纳。
		对于函数内含有大量循环，判断等。编译器会将内内联函数作为普通函数处理。
		
		函数调用过程：
			在栈中为形参和局部变量分配空间
			将实参的值复制给形参
			将函数的返回地址放在栈中，
			执行函数内部逻辑
			执行return语句，从栈中回收形参和局部变量的空间，从栈中取出地址
			调转到改地址处继续执行。
3 函数默认参数
		void func(int a=10,int b=11);
		void func（int a,int b）
		函数的默认参数从左向右，如果一个参数设置了默认参数，那么这个参数之后的参数都必须设置默认参数。
		如果函数声明和函数定义分开写，函数声明和函数定义不能同时设置默认参数。

4 函数的占位参数

	int func(int a,int b, int){}
	在函数内部无法使用占位参数
	占位参数可以赋默认值int=10
	占位参数在方法调用时也需要传值
	func(10,20,30)

5 函数重载
	条件：
		同一个作用域
		参数个数不同
		参数类型不同
		参数顺序不同
	
6 extern “C”
	作用：	
	为了实现c++代码能够调用其他c语言代码
	extern "c"{
		.
		.
		.
	}
	大括号中的部分就会按照c语言的编译风格来编译和链接代码
	
	一般与预编译指令配合使用
	#if 0/1
		
		#ifdef_	cplusplus
		.
		.
	
	#endif 
	
	
	
	 -----自带的预定义宏，意思是如果这是c++代码，则会执行下面的逻辑
	
	

