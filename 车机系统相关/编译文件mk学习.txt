
案例1 ：
	LOCAL_PATH := $(call my-dir)

　　include $(CLEAR_VARS)

　　LOCAL_MODULE := hello

　　LOCAL_SRC_FILES := hello.cpp

　　inlcude $(BUILD_SHARED_LIBRARY)

解析：
	LOCAL_PATH := $(call my-dir)
		　　每个Android.mk文件必须以LOCAL_PATH开始，指定项目的根路径，用于在开发tree中查找源文件
　　		宏my-dir则由Build System提供，返回当前Android.mk文件的路径（固定写法）

　　include $(CLEAR_VARS)
		　CLEAR_VARS变量由Build System提供，并指向一个指定的GNU Makefile，由它清理各种LOCAL_xxx变量（因为所有的编译控制文件由同一个GNU make解析和执行，
			这些变量都是全局的，所以清理后才能避免相互影响），比如LOCAL_MODULE，LOCAL_SRC_FILES，LOCAL_STATIC_LIBRARIES等，但是不清理LOCAL_PATH。

　　LOCAL_MODULE := hello
		　　LOCAL_MODULE模块必须定义

　　LOCAL_SRC_FILES := hello.cpp
			LOCAL_SRC_FILES变量必须要有，后面接需要编译的源码，如C/C++源码，可以不列出头文件，Build System会自动帮我们找出依赖文件

　　inlcude $(BUILD_SHARED_LIBRARY)
			BUILD_SHARED_LIBRARY是Build System提供的一个变量，指向GNU Makefile Script，它负责收集自从上次调用include $(CLEAR_VARS)后的所有LOCAL_xxx变量，并决定编译什么
　　		BUILD_STATIC_LIBRARY：编译为静态库
　			BUILD_SHARED_LIBRARY：编译为动态库
			BUILD_EXECUTABLE：编译为Native C可执行程序，表示编译成可执行程序

	
	=============
	include $(CLEAR_VARS) 和 include $(BUILD_PACKAGE)是一对，表示一个编译模块，编译模块中间的内容没有先后顺序，一个Android.mk文件中可以编写多个编译模块。 
	=============
	include $(call first-makefiles-under,$(LOCAL_PATH))    #在项目根目录下查找所有的mk文件，不包括当前目录
	
	
	===========================================
	LOCAL补充
		LOCAL_STATIC_LIBRARIES := 所需要的静态库
		
		LOCAL_SHARED_LIBRARIES := 所需的动态库
		
		LOCAL_C_INCLUDES := 头文件所在的路径
		
		LOCAL_MODULE_TAGS := user（user，eng，tests，optional）　　
			#user，表示该模块只在user版本下进行编译。optional，表示该模块可以在所有版本下进行编译。
			#其中，user表示用户版本，eng（engineering）表示工程版本，tests表示测试版
		
		LOCAL_CFLAGS += -fno-access-control　　获取访问私有的权限
　　　　　　　　　　-wno-unused-parameter　　取消函数参数未使用的警告

		
		LOCAL_CFLAGS += -DXXX   相当于在所有源文件中增加一个宏定义#define XXX
			eg:	
			Android.mk中增加
				ifeq ($(PRODUCT_MODEL),XXX_A)
				LOCAL_CFLAGS += -DBUILD_MODEL1
				endif
				所编译的Cpp中如下使用：
				#ifdef BUILD_MODEL1
				....
				#endif
	
		LOCAL_CFLAGS
			-D
				LOCAL_CFLAGS += -DXXX   相当于在所有源文件中增加一个宏定义#define
			-O
				代表默认优化，可选：-O0不优化，-O1低级优化，-O2中级优化，-O3高级优化，-Os代码空间优化 
			-W[no-]<警告选项>     no- 表示诊断时忽略这个警告   
				   -Woption 让编译器给出option指定的编译警告，常用的一些如下：
		                   unused-function： 遇到仅声明过但尚未定义的静态函数时发出警告。
		                   unused-parameter： 从未用过的函数参数的警告。
		                   unused-variable： 在本地声明但从未用过的变量的警告。
		                   unused-value： 经计算但从未用过的值得警告。
		                   return-type： 对函数返回类型不当的警告。
		                   uninitialized：在初始化之前就使用自动变量。
		                   float-equal：   比较两个浮点数是否相等。
   				  -Wall  给出“几乎”所有的编译器警告，注意是“几乎”。下面是一些-Wall没有输出的警告类型：
	                   sign-compare：将有符号类型和无符号类型数据进行比较时发出警告。
	                   unreachable-code：如果发现从未执行的代码时给出警告。
	                   inline：如果某函数不能按要求内嵌（inline），则无论是函数声明为inline或者是指定了-finline-functions 选项，编译都将发出警告。      
    			  -Werror  把所有的警告都视为错误处理。
   				  -Wno-option  如果我们不想输出某些警告信息，可以使用此参数形式，比如：LOCAL_CFLAGS := -Wno-unused-parameter
               

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	